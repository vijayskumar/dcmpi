#define dcmpi_provide1( c1 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); }
#define dcmpi_provide2( c1,c2 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); }
#define dcmpi_provide3( c1,c2,c3 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); }
#define dcmpi_provide4( c1,c2,c3,c4 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); }
#define dcmpi_provide5( c1,c2,c3,c4,c5 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); }
#define dcmpi_provide6( c1,c2,c3,c4,c5,c6 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); }
#define dcmpi_provide7( c1,c2,c3,c4,c5,c6,c7 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); }
#define dcmpi_provide8( c1,c2,c3,c4,c5,c6,c7,c8 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); }
#define dcmpi_provide9( c1,c2,c3,c4,c5,c6,c7,c8,c9 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); }
#define dcmpi_provide10( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); }
#define dcmpi_provide11( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); }
#define dcmpi_provide12( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); }
#define dcmpi_provide13( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); }
#define dcmpi_provide14( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); }
#define dcmpi_provide15( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); }
#define dcmpi_provide16( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); }
#define dcmpi_provide17( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); }
#define dcmpi_provide18( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); }
#define dcmpi_provide19( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); }
#define dcmpi_provide20( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); }
#define dcmpi_provide21( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); }
#define dcmpi_provide22( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); }
#define dcmpi_provide23( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); }
#define dcmpi_provide24( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); }
#define dcmpi_provide25( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); }
#define dcmpi_provide26( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); }
#define dcmpi_provide27( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); }
#define dcmpi_provide28( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); }
#define dcmpi_provide29( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); }
#define dcmpi_provide30( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); }
#define dcmpi_provide31( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); }
#define dcmpi_provide32( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); }
#define dcmpi_provide33( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); }
#define dcmpi_provide34( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); }
#define dcmpi_provide35( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); }
#define dcmpi_provide36( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); }
#define dcmpi_provide37( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); }
#define dcmpi_provide38( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); }
#define dcmpi_provide39( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); }
#define dcmpi_provide40( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); }
#define dcmpi_provide41( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); }
#define dcmpi_provide42( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); }
#define dcmpi_provide43( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); }
#define dcmpi_provide44( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); }
#define dcmpi_provide45( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); }
#define dcmpi_provide46( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); }
#define dcmpi_provide47( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); }
#define dcmpi_provide48( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); }
#define dcmpi_provide49( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); }
#define dcmpi_provide50( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); }
#define dcmpi_provide51( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); }
#define dcmpi_provide52( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); }
#define dcmpi_provide53( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); }
#define dcmpi_provide54( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); }
#define dcmpi_provide55( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); }
#define dcmpi_provide56( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); }
#define dcmpi_provide57( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); }
#define dcmpi_provide58( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); }
#define dcmpi_provide59( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); }
#define dcmpi_provide60( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); }
#define dcmpi_provide61( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); }
#define dcmpi_provide62( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); }
#define dcmpi_provide63( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); }
#define dcmpi_provide64( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); }
#define dcmpi_provide65( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); }
#define dcmpi_provide66( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); }
#define dcmpi_provide67( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); }
#define dcmpi_provide68( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); }
#define dcmpi_provide69( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); }
#define dcmpi_provide70( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); }
#define dcmpi_provide71( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); }
#define dcmpi_provide72( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); }
#define dcmpi_provide73( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); }
#define dcmpi_provide74( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); }
#define dcmpi_provide75( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); }
#define dcmpi_provide76( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); }
#define dcmpi_provide77( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); }
#define dcmpi_provide78( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); }
#define dcmpi_provide79( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); }
#define dcmpi_provide80( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); }
#define dcmpi_provide81( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); }
#define dcmpi_provide82( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); }
#define dcmpi_provide83( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); }
#define dcmpi_provide84( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); }
#define dcmpi_provide85( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); }
#define dcmpi_provide86( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); }
#define dcmpi_provide87( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); }
#define dcmpi_provide88( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); }
#define dcmpi_provide89( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); }
#define dcmpi_provide90( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); }
#define dcmpi_provide91( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); }
#define dcmpi_provide92( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); }
#define dcmpi_provide93( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } if (!strcmp(fn,#c93)) { return new c93; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); o.push_back(#c93); }
#define dcmpi_provide94( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } if (!strcmp(fn,#c93)) { return new c93; } if (!strcmp(fn,#c94)) { return new c94; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); o.push_back(#c93); o.push_back(#c94); }
#define dcmpi_provide95( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } if (!strcmp(fn,#c93)) { return new c93; } if (!strcmp(fn,#c94)) { return new c94; } if (!strcmp(fn,#c95)) { return new c95; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); o.push_back(#c93); o.push_back(#c94); o.push_back(#c95); }
#define dcmpi_provide96( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } if (!strcmp(fn,#c93)) { return new c93; } if (!strcmp(fn,#c94)) { return new c94; } if (!strcmp(fn,#c95)) { return new c95; } if (!strcmp(fn,#c96)) { return new c96; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); o.push_back(#c93); o.push_back(#c94); o.push_back(#c95); o.push_back(#c96); }
#define dcmpi_provide97( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } if (!strcmp(fn,#c93)) { return new c93; } if (!strcmp(fn,#c94)) { return new c94; } if (!strcmp(fn,#c95)) { return new c95; } if (!strcmp(fn,#c96)) { return new c96; } if (!strcmp(fn,#c97)) { return new c97; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); o.push_back(#c93); o.push_back(#c94); o.push_back(#c95); o.push_back(#c96); o.push_back(#c97); }
#define dcmpi_provide98( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } if (!strcmp(fn,#c93)) { return new c93; } if (!strcmp(fn,#c94)) { return new c94; } if (!strcmp(fn,#c95)) { return new c95; } if (!strcmp(fn,#c96)) { return new c96; } if (!strcmp(fn,#c97)) { return new c97; } if (!strcmp(fn,#c98)) { return new c98; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); o.push_back(#c93); o.push_back(#c94); o.push_back(#c95); o.push_back(#c96); o.push_back(#c97); o.push_back(#c98); }
#define dcmpi_provide99( c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99 ) extern "C" DCFilter * dcmpi_get_filter(const char * fn) { if (!strcmp(fn,#c1)) { return new c1; } if (!strcmp(fn,#c2)) { return new c2; } if (!strcmp(fn,#c3)) { return new c3; } if (!strcmp(fn,#c4)) { return new c4; } if (!strcmp(fn,#c5)) { return new c5; } if (!strcmp(fn,#c6)) { return new c6; } if (!strcmp(fn,#c7)) { return new c7; } if (!strcmp(fn,#c8)) { return new c8; } if (!strcmp(fn,#c9)) { return new c9; } if (!strcmp(fn,#c10)) { return new c10; } if (!strcmp(fn,#c11)) { return new c11; } if (!strcmp(fn,#c12)) { return new c12; } if (!strcmp(fn,#c13)) { return new c13; } if (!strcmp(fn,#c14)) { return new c14; } if (!strcmp(fn,#c15)) { return new c15; } if (!strcmp(fn,#c16)) { return new c16; } if (!strcmp(fn,#c17)) { return new c17; } if (!strcmp(fn,#c18)) { return new c18; } if (!strcmp(fn,#c19)) { return new c19; } if (!strcmp(fn,#c20)) { return new c20; } if (!strcmp(fn,#c21)) { return new c21; } if (!strcmp(fn,#c22)) { return new c22; } if (!strcmp(fn,#c23)) { return new c23; } if (!strcmp(fn,#c24)) { return new c24; } if (!strcmp(fn,#c25)) { return new c25; } if (!strcmp(fn,#c26)) { return new c26; } if (!strcmp(fn,#c27)) { return new c27; } if (!strcmp(fn,#c28)) { return new c28; } if (!strcmp(fn,#c29)) { return new c29; } if (!strcmp(fn,#c30)) { return new c30; } if (!strcmp(fn,#c31)) { return new c31; } if (!strcmp(fn,#c32)) { return new c32; } if (!strcmp(fn,#c33)) { return new c33; } if (!strcmp(fn,#c34)) { return new c34; } if (!strcmp(fn,#c35)) { return new c35; } if (!strcmp(fn,#c36)) { return new c36; } if (!strcmp(fn,#c37)) { return new c37; } if (!strcmp(fn,#c38)) { return new c38; } if (!strcmp(fn,#c39)) { return new c39; } if (!strcmp(fn,#c40)) { return new c40; } if (!strcmp(fn,#c41)) { return new c41; } if (!strcmp(fn,#c42)) { return new c42; } if (!strcmp(fn,#c43)) { return new c43; } if (!strcmp(fn,#c44)) { return new c44; } if (!strcmp(fn,#c45)) { return new c45; } if (!strcmp(fn,#c46)) { return new c46; } if (!strcmp(fn,#c47)) { return new c47; } if (!strcmp(fn,#c48)) { return new c48; } if (!strcmp(fn,#c49)) { return new c49; } if (!strcmp(fn,#c50)) { return new c50; } if (!strcmp(fn,#c51)) { return new c51; } if (!strcmp(fn,#c52)) { return new c52; } if (!strcmp(fn,#c53)) { return new c53; } if (!strcmp(fn,#c54)) { return new c54; } if (!strcmp(fn,#c55)) { return new c55; } if (!strcmp(fn,#c56)) { return new c56; } if (!strcmp(fn,#c57)) { return new c57; } if (!strcmp(fn,#c58)) { return new c58; } if (!strcmp(fn,#c59)) { return new c59; } if (!strcmp(fn,#c60)) { return new c60; } if (!strcmp(fn,#c61)) { return new c61; } if (!strcmp(fn,#c62)) { return new c62; } if (!strcmp(fn,#c63)) { return new c63; } if (!strcmp(fn,#c64)) { return new c64; } if (!strcmp(fn,#c65)) { return new c65; } if (!strcmp(fn,#c66)) { return new c66; } if (!strcmp(fn,#c67)) { return new c67; } if (!strcmp(fn,#c68)) { return new c68; } if (!strcmp(fn,#c69)) { return new c69; } if (!strcmp(fn,#c70)) { return new c70; } if (!strcmp(fn,#c71)) { return new c71; } if (!strcmp(fn,#c72)) { return new c72; } if (!strcmp(fn,#c73)) { return new c73; } if (!strcmp(fn,#c74)) { return new c74; } if (!strcmp(fn,#c75)) { return new c75; } if (!strcmp(fn,#c76)) { return new c76; } if (!strcmp(fn,#c77)) { return new c77; } if (!strcmp(fn,#c78)) { return new c78; } if (!strcmp(fn,#c79)) { return new c79; } if (!strcmp(fn,#c80)) { return new c80; } if (!strcmp(fn,#c81)) { return new c81; } if (!strcmp(fn,#c82)) { return new c82; } if (!strcmp(fn,#c83)) { return new c83; } if (!strcmp(fn,#c84)) { return new c84; } if (!strcmp(fn,#c85)) { return new c85; } if (!strcmp(fn,#c86)) { return new c86; } if (!strcmp(fn,#c87)) { return new c87; } if (!strcmp(fn,#c88)) { return new c88; } if (!strcmp(fn,#c89)) { return new c89; } if (!strcmp(fn,#c90)) { return new c90; } if (!strcmp(fn,#c91)) { return new c91; } if (!strcmp(fn,#c92)) { return new c92; } if (!strcmp(fn,#c93)) { return new c93; } if (!strcmp(fn,#c94)) { return new c94; } if (!strcmp(fn,#c95)) { return new c95; } if (!strcmp(fn,#c96)) { return new c96; } if (!strcmp(fn,#c97)) { return new c97; } if (!strcmp(fn,#c98)) { return new c98; } if (!strcmp(fn,#c99)) { return new c99; } return NULL;} extern "C" void dcmpi_get_contained_filters(std::vector<std::string> & o) { o.clear(); o.push_back(#c1); o.push_back(#c2); o.push_back(#c3); o.push_back(#c4); o.push_back(#c5); o.push_back(#c6); o.push_back(#c7); o.push_back(#c8); o.push_back(#c9); o.push_back(#c10); o.push_back(#c11); o.push_back(#c12); o.push_back(#c13); o.push_back(#c14); o.push_back(#c15); o.push_back(#c16); o.push_back(#c17); o.push_back(#c18); o.push_back(#c19); o.push_back(#c20); o.push_back(#c21); o.push_back(#c22); o.push_back(#c23); o.push_back(#c24); o.push_back(#c25); o.push_back(#c26); o.push_back(#c27); o.push_back(#c28); o.push_back(#c29); o.push_back(#c30); o.push_back(#c31); o.push_back(#c32); o.push_back(#c33); o.push_back(#c34); o.push_back(#c35); o.push_back(#c36); o.push_back(#c37); o.push_back(#c38); o.push_back(#c39); o.push_back(#c40); o.push_back(#c41); o.push_back(#c42); o.push_back(#c43); o.push_back(#c44); o.push_back(#c45); o.push_back(#c46); o.push_back(#c47); o.push_back(#c48); o.push_back(#c49); o.push_back(#c50); o.push_back(#c51); o.push_back(#c52); o.push_back(#c53); o.push_back(#c54); o.push_back(#c55); o.push_back(#c56); o.push_back(#c57); o.push_back(#c58); o.push_back(#c59); o.push_back(#c60); o.push_back(#c61); o.push_back(#c62); o.push_back(#c63); o.push_back(#c64); o.push_back(#c65); o.push_back(#c66); o.push_back(#c67); o.push_back(#c68); o.push_back(#c69); o.push_back(#c70); o.push_back(#c71); o.push_back(#c72); o.push_back(#c73); o.push_back(#c74); o.push_back(#c75); o.push_back(#c76); o.push_back(#c77); o.push_back(#c78); o.push_back(#c79); o.push_back(#c80); o.push_back(#c81); o.push_back(#c82); o.push_back(#c83); o.push_back(#c84); o.push_back(#c85); o.push_back(#c86); o.push_back(#c87); o.push_back(#c88); o.push_back(#c89); o.push_back(#c90); o.push_back(#c91); o.push_back(#c92); o.push_back(#c93); o.push_back(#c94); o.push_back(#c95); o.push_back(#c96); o.push_back(#c97); o.push_back(#c98); o.push_back(#c99); }
